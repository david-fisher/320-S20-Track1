import{r as t,h as a,H as s}from"./p-039d1faa.js";import{Logger as e,Hub as i}from"@aws-amplify/core";import{A as n}from"./p-417bb5ea.js";import{appendToCognitoUserAgent as r,Auth as o}from"@aws-amplify/auth";import{A as l,U as h,a as c,T as u,S as m,N as p,b as d}from"./p-e70c33b3.js";const f=new e("Authenticator"),g=class{constructor(a){t(this,a),this.initialAuthState=n.SignIn,this.authState=n.Loading,this.toastMessage="",this.onAuthStateChange=(t,a)=>{if(void 0===t)return f.info("nextAuthState cannot be undefined");f.info("Inside onAuthStateChange Method current authState:",this.authState),this.authState=t===n.SignedOut?this.initialAuthState:t,void 0!==a&&(this.authData=a,f.log("Auth Data was set:",this.authData)),f.info(`authState has been updated to ${this.authState}`)}}async componentWillLoad(){i.listen(l,({payload:{event:t,data:a}})=>{switch(t){case"cognitoHostedUI":return this.onAuthStateChange(n.SignedIn,a);case"cognitoHostedUI_failure":case"parsingUrl_failure":case"signOut":case"customGreetingSignOut":return this.onAuthStateChange(n.SignIn,null)}}),i.listen(h,t=>{const{payload:a}=t;switch(a.event){case u:a.message&&(this.toastMessage=a.message);break;case c:a.message&&(this.onAuthStateChange(a.message,a.data),this.toastMessage="");break;default:f.warn("Unhandled Auth Event",a.event)}}),r("amplify-authenticator");const t=localStorage.getItem(m);localStorage.removeItem(m),"true"!==t&&await this.checkUser()}async checkUser(){if(!o||"function"!=typeof o.currentAuthenticatedUser)throw new Error(p);try{const t=await o.currentAuthenticatedUser();this.onAuthStateChange(n.SignedIn,t)}catch(t){let a=null;try{a=localStorage.getItem(d)}catch(t){f.debug("Failed to get the auth state from local storage",t)}try{a===n.SignedIn&&await o.signOut(),this.onAuthStateChange(this.initialAuthState)}catch(t){f.debug("Failed to sign out",t)}}}renderAuthComponent(t){switch(t){case n.SignIn:return a("slot",{name:"sign-in"},a("amplify-sign-in",{federated:this.federated,usernameAlias:this.usernameAlias}));case n.ConfirmSignIn:return a("slot",{name:"confirm-sign-in"},a("amplify-confirm-sign-in",{user:this.authData}));case n.SignUp:return a("slot",{name:"sign-up"},a("amplify-sign-up",{usernameAlias:this.usernameAlias}));case n.ConfirmSignUp:return a("slot",{name:"confirm-sign-up"},a("amplify-confirm-sign-up",{user:this.authData,usernameAlias:this.usernameAlias}));case n.ForgotPassword:return a("slot",{name:"forgot-password"},a("amplify-forgot-password",{usernameAlias:this.usernameAlias}));case n.ResetPassword:return a("slot",{name:"require-new-password"},a("amplify-require-new-password",{user:this.authData}));case n.VerifyContact:return a("slot",{name:"verify-contact"},a("amplify-verify-contact",{user:this.authData}));case n.TOTPSetup:return a("slot",{name:"totp-setup"},a("amplify-totp-setup",{user:this.authData}));case n.Loading:return a("slot",{name:"loading"},a("div",null,"Loading..."));case n.SignedIn:return[a("slot",{name:"greetings"}),a("slot",null)];default:throw new Error(`Unhandled auth state: ${t}`)}}async componentDidUnload(){i.remove(h,t=>{const{payload:a}=t;a.event===u&&a.message&&(this.toastMessage=a.message)})}render(){return a(s,null,this.toastMessage?a("amplify-toast",{message:this.toastMessage,handleClose:()=>{this.toastMessage=""},"data-test":"authenticator-error"}):null,this.renderAuthComponent(this.authState))}};export{g as amplify_authenticator}