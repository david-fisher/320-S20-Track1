import { I18n } from '@aws-amplify/core';
import { Auth } from '@aws-amplify/auth';
import { Component, Prop, h, State } from '@stencil/core';
import { PHONE_SUFFIX, COUNTRY_DIAL_CODE_DEFAULT, COUNTRY_DIAL_CODE_SUFFIX, NO_AUTH_MODULE_FOUND, } from '../../common/constants';
import { AuthState } from '../../common/types/auth-types';
import { dispatchAuthStateChangeEvent, dispatchToastHubEvent, composePhoneNumberInput, checkUsernameAlias, } from '../../common/helpers';
import { Translations } from '../../common/Translations';
export class AmplifySignUp {
    constructor() {
        /** Fires when sign up form is submitted */
        this.handleSubmit = event => this.signUp(event);
        /** Used for header text in sign up component */
        this.headerText = I18n.get(Translations.SIGN_UP_HEADER_TEXT);
        /** Used for the submit button text in sign up component */
        this.submitButtonText = I18n.get(Translations.SIGN_UP_SUBMIT_BUTTON_TEXT);
        /** Used for the submit button text in sign up component */
        this.haveAccountText = I18n.get(Translations.SIGN_UP_HAVE_ACCOUNT_TEXT);
        /** Used for the submit button text in sign up component */
        this.signInText = I18n.get(Translations.SIGN_IN_TEXT);
        /**
         * Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc.
         * by passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing
         * text for a label or adjust a placeholder, you can follow the structure below in order to do just that.
         * ```
         * [
         *  {
         *    type: 'username'|'password'|'email'|'code'|'default',
         *    label: string,
         *    placeholder: string,
         *    hint: string | Functional Component | null,
         *    required: boolean
         *  }
         * ]
         * ```
         */
        this.formFields = [];
        /** Auth state change handler for this component
         * e.g. SignIn -> 'Create Account' link -> SignUp
         */
        this.handleAuthStateChange = dispatchAuthStateChangeEvent;
        /** Username Alias is used to setup authentication with `username`, `email` or `phone_number`  */
        this.usernameAlias = 'username';
        this.loading = false;
        this.phoneNumber = {
            countryDialCodeValue: COUNTRY_DIAL_CODE_DEFAULT,
            phoneNumberValue: null,
        };
    }
    handleUsernameChange(event) {
        this.username = event.target.value;
    }
    handlePasswordChange(event) {
        this.password = event.target.value;
    }
    handleEmailChange(event) {
        this.email = event.target.value;
    }
    handlePhoneNumberChange(event) {
        const name = event.target.name;
        const value = event.target.value;
        /** Cognito expects to have a string be passed when signing up. Since the Select input is separate
         * input from the phone number input, we need to first capture both components values and combined
         * them together.
         */
        if (name === COUNTRY_DIAL_CODE_SUFFIX) {
            this.phoneNumber.countryDialCodeValue = value;
        }
        if (name === PHONE_SUFFIX) {
            this.phoneNumber.phoneNumberValue = value;
        }
    }
    // TODO: Add validation
    // TODO: Prefix
    async signUp(event) {
        if (event) {
            event.preventDefault();
        }
        if (!Auth || typeof Auth.signUp !== 'function') {
            throw new Error(NO_AUTH_MODULE_FOUND);
        }
        switch (this.usernameAlias) {
            case 'email':
                this.userInput = this.email;
                break;
            case 'phone_number':
                this.userInput = composePhoneNumberInput(this.phoneNumber);
                break;
            case 'username':
            default:
                this.userInput = this.username;
                break;
        }
        try {
            const signUpAttrs = {
                username: this.userInput,
                password: this.password,
                attributes: {
                    email: this.email,
                    phone_number: composePhoneNumberInput(this.phoneNumber),
                },
            };
            const data = await Auth.signUp(signUpAttrs);
            this.handleAuthStateChange(AuthState.ConfirmSignUp, Object.assign(Object.assign({}, data.user), { signUpAttrs }));
        }
        catch (error) {
            dispatchToastHubEvent(error);
        }
    }
    async componentWillLoad() {
        checkUsernameAlias(this.usernameAlias);
        switch (this.usernameAlias) {
            case 'email':
                this.formFields = [
                    {
                        type: 'email',
                        placeholder: I18n.get(Translations.SIGN_UP_EMAIL_PLACEHOLDER),
                        required: true,
                        handleInputChange: event => this.handleEmailChange(event),
                        inputProps: {
                            'data-test': 'sign-up-email-input',
                        },
                    },
                    {
                        type: 'password',
                        placeholder: I18n.get(Translations.SIGN_UP_PASSWORD_PLACEHOLDER),
                        required: true,
                        handleInputChange: event => this.handlePasswordChange(event),
                        inputProps: {
                            'data-test': 'sign-up-password-input',
                        },
                    },
                    {
                        type: 'phone_number',
                        required: true,
                        handleInputChange: event => this.handlePhoneNumberChange(event),
                        inputProps: {
                            'data-test': 'sign-up-phone-number-input',
                        },
                    },
                ];
                break;
            case 'phone_number':
                this.formFields = [
                    {
                        type: 'phone_number',
                        required: true,
                        handleInputChange: event => this.handlePhoneNumberChange(event),
                        inputProps: {
                            'data-test': 'sign-up-phone-number-input',
                        },
                    },
                    {
                        type: 'password',
                        placeholder: I18n.get(Translations.SIGN_UP_PASSWORD_PLACEHOLDER),
                        required: true,
                        handleInputChange: event => this.handlePasswordChange(event),
                        inputProps: {
                            'data-test': 'sign-up-password-input',
                        },
                    },
                    {
                        type: 'email',
                        placeholder: I18n.get(Translations.SIGN_UP_EMAIL_PLACEHOLDER),
                        required: true,
                        handleInputChange: event => this.handleEmailChange(event),
                        inputProps: {
                            'data-test': 'sign-up-email-input',
                        },
                    },
                ];
                break;
            case 'username':
            default:
                this.formFields = [
                    {
                        type: 'username',
                        placeholder: I18n.get(Translations.SIGN_UP_USERNAME_PLACEHOLDER),
                        required: true,
                        handleInputChange: event => this.handleUsernameChange(event),
                        inputProps: {
                            'data-test': 'sign-up-username-input',
                        },
                    },
                    {
                        type: 'password',
                        placeholder: I18n.get(Translations.SIGN_UP_PASSWORD_PLACEHOLDER),
                        required: true,
                        handleInputChange: event => this.handlePasswordChange(event),
                        inputProps: {
                            'data-test': 'sign-up-password-input',
                        },
                    },
                    {
                        type: 'email',
                        placeholder: I18n.get(Translations.SIGN_UP_EMAIL_PLACEHOLDER),
                        required: true,
                        handleInputChange: event => this.handleEmailChange(event),
                        inputProps: {
                            'data-test': 'sign-up-email-input',
                        },
                    },
                    {
                        type: 'phone_number',
                        required: true,
                        handleInputChange: event => this.handlePhoneNumberChange(event),
                        inputProps: {
                            'data-test': 'sign-up-phone-number-input',
                        },
                    },
                ];
                break;
        }
    }
    render() {
        return (h("amplify-form-section", { headerText: this.headerText, handleSubmit: this.handleSubmit, testDataPrefix: 'sign-up' },
            h("amplify-auth-fields", { formFields: this.formFields }),
            h("div", { class: "sign-up-form-footer", slot: "amplify-form-section-footer" },
                h("span", null,
                    this.haveAccountText,
                    ' ',
                    h("amplify-button", { variant: "anchor", onClick: () => this.handleAuthStateChange(AuthState.SignIn), "data-test": "sign-up-sign-in-link" }, this.signInText)),
                h("amplify-button", { type: "submit", "data-test": "sign-up-create-account-button" },
                    h("amplify-loading-spinner", { style: { display: this.loading ? 'initial' : 'none' } }),
                    h("span", { style: { display: this.loading ? 'none' : 'initial' } }, this.submitButtonText)))));
    }
    static get is() { return "amplify-sign-up"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["amplify-sign-up.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["amplify-sign-up.css"]
    }; }
    static get properties() { return {
        "handleSubmit": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(event: Event) => void",
                "resolved": "(event: Event) => void",
                "references": {
                    "Event": {
                        "location": "global"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Fires when sign up form is submitted"
            },
            "defaultValue": "event => this.signUp(event)"
        },
        "validationErrors": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Engages when invalid actions occur, such as missing field, etc."
            },
            "attribute": "validation-errors",
            "reflect": false
        },
        "headerText": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Used for header text in sign up component"
            },
            "attribute": "header-text",
            "reflect": false,
            "defaultValue": "I18n.get(Translations.SIGN_UP_HEADER_TEXT)"
        },
        "submitButtonText": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Used for the submit button text in sign up component"
            },
            "attribute": "submit-button-text",
            "reflect": false,
            "defaultValue": "I18n.get(Translations.SIGN_UP_SUBMIT_BUTTON_TEXT)"
        },
        "haveAccountText": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Used for the submit button text in sign up component"
            },
            "attribute": "have-account-text",
            "reflect": false,
            "defaultValue": "I18n.get(Translations.SIGN_UP_HAVE_ACCOUNT_TEXT)"
        },
        "signInText": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Used for the submit button text in sign up component"
            },
            "attribute": "sign-in-text",
            "reflect": false,
            "defaultValue": "I18n.get(Translations.SIGN_IN_TEXT)"
        },
        "formFields": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "FormFieldTypes | string[]",
                "resolved": "FormFieldTypes | string[]",
                "references": {
                    "FormFieldTypes": {
                        "location": "import",
                        "path": "../../components/amplify-auth-fields/amplify-auth-fields-interface"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Form fields allows you to utilize our pre-built components such as username field, code field, password field, email field, etc.\nby passing an array of strings that you would like the order of the form to be in. If you need more customization, such as changing\ntext for a label or adjust a placeholder, you can follow the structure below in order to do just that.\n```\n[\n  {\n    type: 'username'|'password'|'email'|'code'|'default',\n    label: string,\n    placeholder: string,\n    hint: string | Functional Component | null,\n    required: boolean\n  }\n]\n```"
            },
            "defaultValue": "[]"
        },
        "handleAuthStateChange": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "AuthStateHandler",
                "resolved": "(nextAuthState: AuthState, data?: object) => void",
                "references": {
                    "AuthStateHandler": {
                        "location": "import",
                        "path": "../../common/types/auth-types"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Auth state change handler for this component\ne.g. SignIn -> 'Create Account' link -> SignUp"
            },
            "defaultValue": "dispatchAuthStateChangeEvent"
        },
        "usernameAlias": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "UsernameAliasStrings",
                "resolved": "\"email\" | \"phone_number\" | \"username\"",
                "references": {
                    "UsernameAliasStrings": {
                        "location": "import",
                        "path": "../../common/types/auth-types"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Username Alias is used to setup authentication with `username`, `email` or `phone_number`"
            },
            "attribute": "username-alias",
            "reflect": false,
            "defaultValue": "'username'"
        }
    }; }
    static get states() { return {
        "loading": {},
        "username": {},
        "password": {},
        "email": {},
        "phoneNumber": {}
    }; }
}
